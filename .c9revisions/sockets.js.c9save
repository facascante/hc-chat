{"ts":1362352917907,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1362355428688,"patch":[[{"diffs":[[1,"var parent = module.parent.exports\n  , app = parent.app\n  , server = parent.server\n  , cient = parent.client\n  , sessionStore = parent.sessionStore\n  , sio = require('socket.io')\n  , cookieParser = require(\"connect\").utils.parseSignedCookies\n  , cookie = require(\"cookie\");\n  \nvar io = sio.listen(server);\n\nio.set('authorization', function (hsData, accept) {\n  if(hsData.headers.cookie) {\n    var cookies = cookieParser(cookie.parse(hsData.headers.cookie), \"hatchcatch\")\n      , sid = cookies['balloons'];\n\n    sessionStore.load(sid, function(err, session) {\n      if(err || !session) {\n        return accept('Error retrieving session!', false);\n      }\n\n      hsData.hatchcatch = {\n        user: session.passport.user,\n        room: /\\/(?:([^\\/]+?))\\/?$/g.exec(hsData.headers.referer)[1]\n      };\n\n      return accept(null, true);\n      \n    });\n  } else {\n    return accept('No cookie transmitted.', false);\n  }\n});"]],"start1":0,"start2":0,"length1":0,"length2":917}]],"length":917,"saved":false}
{"ts":1362355478499,"patch":[[{"diffs":[[0,"\n  }\n});"],[1,"\n\nio.configure(function() {\n  io.set('store', new sio.RedisStore({client: client}));\n  io.enable('browser client minification');\n  io.enable('browser client gzip');\n});"]],"start1":909,"start2":909,"length1":8,"length2":176}]],"length":1085,"saved":false}
{"ts":1362355771825,"patch":[[{"diffs":[[0,"er\n  , c"],[1,"l"],[0,"ient = p"]],"start1":80,"start2":80,"length1":16,"length2":17},{"diffs":[[0," gzip');\n});"],[1,"\n\nio.sockets.on('connection', function (socket) {\n  var hs = socket.handshake\n    , nickname = hs.hatchcatch.user.username\n    , provider = hs.hatchcatch.user.provider\n    , userKey = provider + \":\" + nickname\n    , room_id = hs.hatchcatch.room;\n\n  socket.join(room_id);\n  \n  socket.on('im', function(data) {\n    var no_empty = data.msg.replace(\"\\n\",\"\");\n    if(no_empty.length > 0) {      \n      io.sockets.in(room_id).emit('om', {\n        nickname: nickname,\n        provider: provider,\n        msg: data.msg\n      });        \n    }   \n  });\n\n  socket.on('disconnect', function() {\n    \n  });\n});\n"]],"start1":1074,"start2":1074,"length1":12,"length2":611}]],"length":1685,"saved":false}
{"ts":1362356017543,"patch":[[{"diffs":[[0,"e\n    , "],[-1,"nick"],[1,"user"],[0,"name = h"]],"start1":1162,"start2":1162,"length1":20,"length2":20},{"diffs":[[0,"  , "],[-1,"userKey = provider + \":\" + nickname"],[1,"codename = hs.hatchcatch.user.codename\n    , gender = hs.hatchcatch.user.gender"],[0,"\n   "]],"start1":1256,"start2":1256,"length1":43,"length2":87},{"diffs":[[0,"  , room"],[-1,"_id"],[0," = hs.ha"]],"start1":1342,"start2":1342,"length1":19,"length2":16},{"diffs":[[0,"oin(room"],[-1,"_id"],[0,");\n  \n  "]],"start1":1384,"start2":1384,"length1":19,"length2":16},{"diffs":[[0,"room"],[-1,"_id"],[0,").em"]],"start1":1535,"start2":1535,"length1":11,"length2":8},{"diffs":[[0,"    "],[-1,"nick"],[1,"username: username,\n        gender: gender,\n        code"],[0,"name: "],[-1,"nick"],[1,"code"],[0,"name"]],"start1":1558,"start2":1558,"length1":22,"length2":74}]],"length":1772,"saved":false}
{"ts":1362357254774,"patch":[[{"diffs":[[0,"on('"],[-1,"i"],[0,"m"],[1,"y msg"],[0,"', f"]],"start1":1407,"start2":1407,"length1":10,"length2":14},{"diffs":[[0,").emit('"],[-1,"om"],[1,"new msg"],[0,"', {\n   "]],"start1":1543,"start2":1543,"length1":18,"length2":23}]],"length":1781,"saved":false}
